<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jacob Adkins</title>
    <description></description>
    <link>http://jpa.io/</link>
    <atom:link href="http://jpa.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 12 Feb 2017 14:14:24 -0600</pubDate>
    <lastBuildDate>Sun, 12 Feb 2017 14:14:24 -0600</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Examples of Work</title>
        <description>&lt;h4 id=&quot;centerhello-the-following-are-a-few-examples-of-my-workcenter&quot;&gt;&lt;center&gt;Hello! The following are a few examples of my work:&lt;/center&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ios&quot;&gt;&lt;strong&gt;iOS&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;snapchat-filters-implementation&quot;&gt;Snapchat Filters Implementation&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lorsen/ImageLab/tree/Lab_4&quot;&gt;Github link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4eWPFaA1nwE&quot;&gt;Video demonstration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an implementation of a simple superimposed-graphics-over-a-tracked-face
effect from mobile apps such as Snapchat.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;ml-boxing-app-boxfit&quot;&gt;ML Boxing App “BoxFit”&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lorsen/BoxFit/tree/master/BoxFit&quot;&gt;Github link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jpadkins/BoxFitSimpleTrainingApp/blob/master/BoxFitTrainingApp/MotionHandler.swift&quot;&gt;Link to motion data capture/processing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BoxFit allowed its users to perfect four boxing moves: Jab, Uppercut, Block and
Hook, but comparing their arm movements while wearing their smartphone on a sports
strap on their arm to a model we had trained. The server side was implemented with
Python Tornado as the server and scikit-learn to handle the training.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Other iOS apps I’ve worked on include&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;an app that finds the user’s bpm from their finger when placed over the camera&lt;/li&gt;
  &lt;li&gt;an app that uses an inaudible tone to determine distance&lt;/li&gt;
  &lt;li&gt;a feature-rich social platform aimed at students&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;c&quot;&gt;&lt;strong&gt;C&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;research-on-kernel-space-io-performance&quot;&gt;Research on Kernel Space I/O Performance&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jpadkins/KernelSpaceIO&quot;&gt;Github link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For research in my Operating Systems class, I wanted to find out just how much slower
(or faster?) I/O operations would be from the kernelspace, so I wrote the same I/O program
as closely as I could in both Modern C and a Kernel Module and benchmarked them.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;c-1&quot;&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;tsdc-parser&quot;&gt;TSDC Parser&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jpadkins/sdc_parser&quot;&gt;Github link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This small program was made to run continuously on the machines
which operated industrial printers. I included it on here because&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It is coupled tightly with sqlite3’s C-api, but I made use of modern
C++11 techniques to improve code visability.&lt;/li&gt;
  &lt;li&gt;It was written to be maintainable by another individual who would
come onboard long after I had left and whose skill level I did not know,
so I described very clearly what action every line performed. (This was
before I was familiar with in-code-documentation generators)&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;graphical-terminal-emulator&quot;&gt;Graphical Terminal Emulator&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jpadkins/GlyphRendererEngine/blob/master/old/src_old4/GLYF/Renderer.hpp&quot;&gt;Github link to render logic file&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was an old attempt at creating a graphical terminal emulator. I wanted
to make a terminal emulator with OpenGL that would support flashy text effects,
and when I put the project down I had succeeded in&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;rendering text&lt;/li&gt;
  &lt;li&gt;supporting a rubust animation framework&lt;/li&gt;
  &lt;li&gt;supporting multiple ttf fonts by abstracting away spacing/kerning problems&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The file that is linked above contains most of the rendering code. I included
this because project because there was a lot of precise computations that needed
to be performed to render the text correctly and I heavily profiled it for performance.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;python&quot;&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;encrypted-cloud-storage-wrapper&quot;&gt;Encrypted Cloud Storage Wrapper&lt;/h5&gt;

&lt;p&gt;This is a closed-source wrapper around popular cloud-based storage platforms
(Google Drive, OneDrive, DropBox) which performed client-side encryption and
decrytion automatically, so only your encrypted files were stored on the cloud.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;safespots&quot;&gt;SafeSpots&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jpadkins/SafeSpotBackup/tree/master/safespots&quot;&gt;Github link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Safespots was a web and android application that allowed users to find the safest walking
routes. This was done in a fashion similar to Google Maps, however we pulled data from
crime reports APIs to help us determine the fastest/safest route. The API was written in
JS, with interop into a python driver to run the Cassandra cluster it was deployed on.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;my-old-blog&quot;&gt;My Old Blog&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jpadkins/jpa.io/tree/master/blog&quot;&gt;Github link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My old blog, written for Django 1.9 and deployed on Apache with WSGI.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;elixir&quot;&gt;&lt;strong&gt;Elixir&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;pragmatism-online&quot;&gt;Pragmatism Online&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jpadkins/ElixirClassFinal&quot;&gt;Github link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jpadkins/ElixirClassFinal/blob/master/mud_server/web/channels/room_channel.ex&quot;&gt;File with most of the room/socket logic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jpadkins/ElixirClassFinal/tree/master/mud_server/lib/mud_server&quot;&gt;Directory with most of the game logic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jpadkins/ElixirClassFinal/blob/master/mud_client/lib/mud_client/socket_client.ex&quot;&gt;File implemeting the terminal client&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jpadkins/ElixirClassFinal/blob/master/mud_server/web/static/js/chat.js&quot;&gt;File containing web interface implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A simple MUD with both a web and terminal client. Implemented as the
final project for the Elixir/Phoenix course I took at SMU in the Fall
of 2016, taught by David Thomas the Pragmatic Programmer.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ruby&quot;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;I have experience with three large Rails applications, one of which was just an API.
However, all of them are closed-source, so instead I will post the Gemfile from the API
of my recent App, to show which libraries I am most familiar with.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jpadkins/jpadkins.github.io/blob/master/_misc/Gemfile&quot;&gt;Gemfile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Other languages I am proficient in are Rust (which I’ve contributed to), Lua, and PHP.&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Feb 2017 00:00:00 -0600</pubDate>
        <link>http://jpa.io/2017/02/11/examples-of-work/</link>
        <guid isPermaLink="true">http://jpa.io/2017/02/11/examples-of-work/</guid>
        
        
      </item>
    
      <item>
        <title>Moving to Jekyll</title>
        <description>&lt;p&gt;If you’re reading this, then you’ve caught me while
I’m in the middle of migrating my blog from my old
Django site to a static site generated via Jekyll.&lt;/p&gt;

&lt;p&gt;Be sure to check back later,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is a test of the syntax hightlighting.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Thanks&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Dec 2016 00:00:00 -0600</pubDate>
        <link>http://jpa.io/2016/12/18/moving-to-jekyll/</link>
        <guid isPermaLink="true">http://jpa.io/2016/12/18/moving-to-jekyll/</guid>
        
        
      </item>
    
  </channel>
</rss>
